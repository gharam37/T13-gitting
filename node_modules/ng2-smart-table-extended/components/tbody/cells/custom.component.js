var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { Row } from '../../../lib/data-set/row';
import { Grid } from '../../../lib/grid';
var TbodyCustomComponent = (function () {
    function TbodyCustomComponent() {
        this.custom = new EventEmitter();
        this.selectedItem = {};
    }
    TbodyCustomComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // console.log( 'setting up select action default values');
        var customActions = this.grid.getSetting('actions.custom');
        if (customActions && customActions.length > 0) {
            customActions.forEach(function (a) {
                if (a.defaultSelection) {
                    _this.selectedItem[a.name] = _this.row.getData()[a.name] || a.defaultSelection.value;
                }
            });
        }
    };
    TbodyCustomComponent.prototype.onSelect = function (action) {
        event.preventDefault();
        event.stopPropagation();
        this.custom.emit({
            action: action,
            data: this.row.getData(),
            source: this.source,
            selectedItem: this.selectedItem[action.name],
        });
    };
    TbodyCustomComponent.prototype.onCustom = function (action, event) {
        event.preventDefault();
        event.stopPropagation();
        this.custom.emit({
            action: action,
            data: this.row.getData(),
            source: this.source,
        });
    };
    TbodyCustomComponent.prototype.checkShowFunction = function (action) {
        if (action.showFunction && typeof action.showFunction === 'function') {
            return action.showFunction(this.row);
        }
        else {
            return true;
        }
    };
    return TbodyCustomComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Grid)
], TbodyCustomComponent.prototype, "grid", void 0);
__decorate([
    Input(),
    __metadata("design:type", Row)
], TbodyCustomComponent.prototype, "row", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TbodyCustomComponent.prototype, "source", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TbodyCustomComponent.prototype, "custom", void 0);
TbodyCustomComponent = __decorate([
    Component({
        selector: 'ng2-st-tbody-custom',
        changeDetection: ChangeDetectionStrategy.OnPush,
        template: "\n    <div *ngFor=\"let action of grid.getSetting('actions.custom')\" [ngSwitch]=\"action.type\">\n      <div *ngIf=\"checkShowFunction(action)\">\n        <div *ngSwitchCase=\"'select'\"\n             class=\"ng2-smart-action ng2-smart-action-custom-custom\">\n          <select [(ngModel)]=\"selectedItem[action.name]\" required (change)=\"onSelect(action)\">\n            <option *ngFor=\"let item of action.optionItems\" [ngValue]=\"item.value\">{{item.description}}</option>\n          </select>\n        </div>\n        <a *ngSwitchDefault\n           [innerHTML]=\"action.title\"\n           class=\"ng2-smart-action ng2-smart-action-custom-custom\"\n           href=\"#\"\n           (click)=\"onCustom(action, $event)\"></a>\n      </div>\n    </div>\n  ",
    })
], TbodyCustomComponent);
export { TbodyCustomComponent };
//# sourceMappingURL=custom.component.js.map