{"version":3,"file":"cell.component.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/components/cell/cell.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAiB,MAAM,eAAe,CAAC;AAEtF,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,GAAG,EAAE,MAAM,wBAAwB,CAAC;AAc7C,IAAa,aAAa;IAZ1B;QAoBW,eAAU,GAAW,EAAE,CAAC;QACxB,SAAI,GAAW,QAAQ,CAAC;QACxB,gBAAW,GAAY,KAAK,CAAC;QAE5B,cAAS,GAAG,IAAI,YAAY,EAAO,CAAC;QACpC,WAAM,GAAG,IAAI,YAAY,EAAO,CAAC;QACjC,YAAO,GAAG,IAAI,YAAY,EAAO,CAAC;QAClC,SAAI,GAAG,IAAI,YAAY,EAAO,CAAC;IAa3C,CAAC;IAXC,gCAAQ,GAAR,UAAU,KAAU;QAClB,EAAE,CAAC,CAAE,IAAI,CAAC,KAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,aAAa,CAAE,CAAC;QAChE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAE,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAE,MAAM,CAAE,KAAK,UAAW,CAAC,CAAC,CAAC;gBAC7E,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,GAAG,CAAE,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAE,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AA5BD,IA4BC;AA1BU;IAAR,KAAK,EAAE;8BAAO,IAAI;2CAAC;AACX;IAAR,KAAK,EAAE;8BAAM,GAAG;0CAAC;AACT;IAAR,KAAK,EAAE;8BAAc,YAAY;kDAAM;AAC/B;IAAR,KAAK,EAAE;8BAAgB,YAAY;oDAAM;AACjC;IAAR,KAAK,EAAE;;4CAAgB;AACf;IAAR,KAAK,EAAE;8BAAO,IAAI;2CAAC;AACX;IAAR,KAAK,EAAE;;iDAAyB;AACxB;IAAR,KAAK,EAAE;;2CAAyB;AACxB;IAAR,KAAK,EAAE;;kDAA8B;AAE5B;IAAT,MAAM,EAAE;;gDAAqC;AACpC;IAAT,MAAM,EAAE;;6CAAkC;AACjC;IAAT,MAAM,EAAE;;8CAAmC;AAClC;IAAT,MAAM,EAAE;;2CAAgC;AAf9B,aAAa;IAZzB,SAAS,CAAE;QACV,QAAQ,EAAE,sBAAsB;QAChC,QAAQ,EAAE,+aAQT;KACF,CAAE;GACU,aAAa,CA4BzB;SA5BY,aAAa","sourcesContent":["import { Component, Input, Output, EventEmitter, AfterViewInit } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { Cell } from '../../lib/data-set/cell';\nimport { Row } from '../../lib/data-set/row';\n\n@Component( {\n  selector: 'ng2-smart-table-cell',\n  template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\"\n                          (completed)=\"completed.emit($event)\"\n                          (changed)=\"changed.emit($event)\">\n    </table-cell-edit-mode>\n  `,\n} )\nexport class CellComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() createConfirm: EventEmitter<any>;\n  @Input() isNew: boolean;\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n  @Input() mode: string = 'inline';\n  @Input() isInEditing: boolean = false;\n\n  @Output() completed = new EventEmitter<any>();\n  @Output() edited = new EventEmitter<any>();\n  @Output() changed = new EventEmitter<any>();\n  @Output() save = new EventEmitter<any>();\n\n  onEdited( event: any ) {\n    if ( this.isNew ) {\n      this.grid.create( this.grid.getNewRow(), this.createConfirm );\n    } else {\n      if ( event.key === 'Enter' && this.grid.getSetting( 'mode' ) === 'external' ) {\n        this.save.emit( this.row );\n      } else {\n        this.grid.save( this.row, this.editConfirm );\n      }\n    }\n  }\n}\n"]}