{"version":3,"file":"cell.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/lib/data-set/cell.ts"],"names":[],"mappings":"AAIA;IAME,cAAsB,KAAU,EAAY,GAAQ,EAAY,MAAW,EAAY,OAAgB,EAAY,KAAc;QAA3G,UAAK,GAAL,KAAK,CAAK;QAAY,QAAG,GAAH,GAAG,CAAK;QAAY,WAAM,GAAN,MAAM,CAAK;QAAY,YAAO,GAAP,OAAO,CAAS;QAAY,UAAK,GAAL,KAAK,CAAS;QAJjI,aAAQ,GAAQ,EAAE,CAAC;QAKjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,wBAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,qBAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,uBAAQ,GAAR;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,YAAY,QAAQ,CAAC;QACxE,IAAM,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7E,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,uBAAQ,GAAR,UAAS,KAAU;QACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,oBAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC;IAC7B,CAAC;IAED,uBAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,yBAAU,GAAV;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,YAAY,QAAQ,CAAC;YACtE,IAAM,cAAc,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YACnF,MAAM,CAAC,cAAc,CAAE,IAAI,CAAE,CAAC;QAChC,CAAC;IACH,CAAC;IACH,WAAC;AAAD,CAAC,AA9CD;;AAGmB,YAAO,GAAG,UAAC,KAAU,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC;AAChC,aAAQ,GAAG,UAAE,IAAU,IAAM,OAAA,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,EAA3B,CAA2B,CAAC","sourcesContent":["import { Column } from './column';\nimport { DataSet } from './data-set';\nimport { Row } from './row';\n\nexport class Cell {\n\n  newValue: any = '';\n  protected static PREPARE = (value: any) => value;\n  protected static EDITABLE = ( cell: Cell ) => cell.getColumn().isEditable;\n\n  constructor(protected value: any, protected row: Row, protected column: any, protected dataSet: DataSet, protected isNew: boolean) {\n    this.newValue = value;\n  }\n\n  getColumn(): Column {\n    return this.column;\n  }\n\n  getRow(): Row {\n    return this.row;\n  }\n\n  getValue(): any {\n    const valid = this.column.getValuePrepareFunction() instanceof Function;\n    const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n    return prepare.call(null, this.value, this.row.getData());\n  }\n\n  setValue(value: any): any {\n    this.newValue = value;\n  }\n\n  getId(): string {\n    return this.getColumn().id;\n  }\n\n  getTitle(): string {\n    return this.getColumn().title;\n  }\n\n  isEditable(): boolean {\n    if (this.getRow().index === -1) {\n      return this.getColumn().isAddable;\n    }\n    else {\n      const valid = this.column.getIsEditableFunction() instanceof Function;\n      const isEditableFunc = valid ? this.column.getIsEditableFunction() : Cell.EDITABLE;\n      return isEditableFunc( this );\n    }\n  }\n}\n"]}